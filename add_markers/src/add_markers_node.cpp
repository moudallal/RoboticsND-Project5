#include <ros/ros.h>
#include <visualization_msgs/Marker.h>
#include <cmath>
#include "nav_msgs/Odometry.h"

// Define pickup and drop off poses
// Hint: Poses should be within the costmap generated by the SLAM algorithm
double pickup_pose[3] = {-2.0, -2.0, 1.0};
double dropoff_pose[3] = {5.0, 1.0, 1.0};

// Define current pose of the robot
double pose[3] = {0, 0, 1.0};

// Define getPose method to get the current pose of the robot
void getPose(const nav_msgs::Odometry::ConstPtr &msg)
{
  pose[0] = msg->pose.pose.position.x;
  pose[1] = msg->pose.pose.position.y;
  pose[2] = msg->pose.pose.orientation.w;
}

// Define getDistanceToPose method to get the distance between the robot and the goal pose
double getDistanceToPose(double goal[3])
{
  return sqrt(pow(goal[0] - pose[0], 2) + pow(goal[1] - pose[1], 2));
}

// Define checkDistance method to check if the robot is close to a specified zone
bool checkDistance(double check_pose[3])
{
  return getDistanceToPose(check_pose) < 0.2;
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "add_markers");
  ros::NodeHandle n;
  ros::Rate r(1);
  ros::Publisher marker_pub = n.advertise<visualization_msgs::Marker>("visualization_marker", 1);

  ros::Subscriber pose_sub = n.subscribe("odom", 10, getPose);

  enum State
  {
    PICK,
    TRANSPORT,
    DROP,
  } state = PICK;

  ROS_INFO("Launching add_markers node.");
  while (ros::ok())
  {
    visualization_msgs::Marker marker;
    // Set the frame ID and timestamp.  See the TF tutorials for information on these.
    marker.header.frame_id = "map";
    marker.header.stamp = ros::Time::now();

    marker.ns = "basic_shapes";
    marker.id = 0;

    marker.type = visualization_msgs::Marker::CUBE;

    marker.action = visualization_msgs::Marker::ADD;

    marker.pose.position.x = 0;
    marker.pose.position.y = 0;
    marker.pose.position.z = 0;
    marker.pose.orientation.x = 0.0;
    marker.pose.orientation.y = 0.0;
    marker.pose.orientation.z = 0.0;
    marker.pose.orientation.w = 1.0;

    marker.scale.x = 0.3;
    marker.scale.y = 0.3;
    marker.scale.z = 0.3;

    marker.color.r = 1.0f;
    marker.color.g = 0.0f;
    marker.color.b = 0.0f;
    marker.color.a = 1.0;

    marker.lifetime = ros::Duration();

    ros::spinOnce();

    if (state == PICK)
    {
      // Add marker add pickup zone
      marker.action = visualization_msgs::Marker::ADD;
      marker.pose.position.x = pickup_pose[0];
      marker.pose.position.y = pickup_pose[1];
      marker.pose.orientation.w = pickup_pose[2];
      // Publish new marker action
      marker_pub.publish(marker);
      // Check if the robot is close enough to the pick up zone (0.2m away from pickup_pose)
      if (checkDistance(pickup_pose))
      {
        sleep(5);
        ROS_INFO("Pickup zone has been reached.");
        // Update state
        state = TRANSPORT;
      }
    }
    else if (state == TRANSPORT)
    {
      // Remove marker at pickup zone
      marker.action = visualization_msgs::Marker::DELETE;
      marker.pose.position.x = dropoff_pose[0];
      marker.pose.position.y = dropoff_pose[1];
      marker.pose.orientation.w = dropoff_pose[2];
      // Publish new marker action
      marker_pub.publish(marker);
      // Check if the robot is close enough from the drop off zone (0.2 m away from dropoff_pose)
      if (checkDistance(dropoff_pose))
      {
        ROS_INFO("Dropoff zone has been reached.");
        // Update state
        state = DROP;
      }
    }
    else 
    {
      // Add marker at dropoff zone
      marker.action = visualization_msgs::Marker::ADD;
      marker.pose.position.x = dropoff_pose[0];
      marker.pose.position.y = dropoff_pose[1];
      marker.pose.orientation.w = dropoff_pose[2];
      // Publish new marker action
      marker_pub.publish(marker);
    }
  }
}
